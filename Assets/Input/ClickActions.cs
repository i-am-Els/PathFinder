//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/ClickActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ClickActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ClickActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ClickActions"",
    ""maps"": [
        {
            ""name"": ""ClickControls"",
            ""id"": ""a6e858c3-d3a2-4d33-b374-10977a0c8c0b"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""PassThrough"",
                    ""id"": ""95f6bf2b-588b-4455-9f1f-f92b75d649f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f60c7641-9c7f-49e3-8f8d-20a0bb1e3536"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Deselect"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c0c7f19f-cd93-4120-af9a-bee5524a0c8d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Act"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f8cf7234-e5c8-4371-8b50-ce261baf8135"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9ae2db10-e00f-488d-8f70-c8dd7de4fd8f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74e403ef-4ffc-4ee4-ac39-3b17c65551db"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9770b5e-fc60-4b24-8a4f-582dab76b754"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57138701-650e-4d1b-bf8e-2f7fd7b995e4"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21434fd2-dd90-4142-bed7-1c7a2b734dfa"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Deselect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""846da07b-4e78-4ecc-836e-abf627e63462"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Deselect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76d5e0f1-68f6-40e0-949b-570e47ec7526"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Act"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d3b1e89-86d2-42eb-840c-7b902695f613"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Act"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ClickControls
        m_ClickControls = asset.FindActionMap("ClickControls", throwIfNotFound: true);
        m_ClickControls_Select = m_ClickControls.FindAction("Select", throwIfNotFound: true);
        m_ClickControls_Position = m_ClickControls.FindAction("Position", throwIfNotFound: true);
        m_ClickControls_Deselect = m_ClickControls.FindAction("Deselect", throwIfNotFound: true);
        m_ClickControls_Act = m_ClickControls.FindAction("Act", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ClickControls
    private readonly InputActionMap m_ClickControls;
    private List<IClickControlsActions> m_ClickControlsActionsCallbackInterfaces = new List<IClickControlsActions>();
    private readonly InputAction m_ClickControls_Select;
    private readonly InputAction m_ClickControls_Position;
    private readonly InputAction m_ClickControls_Deselect;
    private readonly InputAction m_ClickControls_Act;
    public struct ClickControlsActions
    {
        private @ClickActions m_Wrapper;
        public ClickControlsActions(@ClickActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_ClickControls_Select;
        public InputAction @Position => m_Wrapper.m_ClickControls_Position;
        public InputAction @Deselect => m_Wrapper.m_ClickControls_Deselect;
        public InputAction @Act => m_Wrapper.m_ClickControls_Act;
        public InputActionMap Get() { return m_Wrapper.m_ClickControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ClickControlsActions set) { return set.Get(); }
        public void AddCallbacks(IClickControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_ClickControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ClickControlsActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Deselect.started += instance.OnDeselect;
            @Deselect.performed += instance.OnDeselect;
            @Deselect.canceled += instance.OnDeselect;
            @Act.started += instance.OnAct;
            @Act.performed += instance.OnAct;
            @Act.canceled += instance.OnAct;
        }

        private void UnregisterCallbacks(IClickControlsActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Deselect.started -= instance.OnDeselect;
            @Deselect.performed -= instance.OnDeselect;
            @Deselect.canceled -= instance.OnDeselect;
            @Act.started -= instance.OnAct;
            @Act.performed -= instance.OnAct;
            @Act.canceled -= instance.OnAct;
        }

        public void RemoveCallbacks(IClickControlsActions instance)
        {
            if (m_Wrapper.m_ClickControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IClickControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_ClickControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ClickControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ClickControlsActions @ClickControls => new ClickControlsActions(this);
    public interface IClickControlsActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
        void OnDeselect(InputAction.CallbackContext context);
        void OnAct(InputAction.CallbackContext context);
    }
}
